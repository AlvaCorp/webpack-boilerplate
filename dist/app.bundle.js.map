{"version":3,"sources":["webpack:///app.bundle.js","webpack:///../node_modules/@babel/runtime/helpers/asyncToGenerator.js","webpack:///../node_modules/@babel/runtime/helpers/classCallCheck.js","webpack:///../node_modules/@babel/runtime/helpers/createClass.js","webpack:///../node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime-module.js","webpack:///../node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime.js","webpack:///../node_modules/@babel/runtime/regenerator/index.js","webpack:///../node_modules/webpack/buildin/harmony-module.js","webpack:///./js/app.js","webpack:///./js/components/SampleComponent.js","webpack:///./js/helpers/jsonRequest.js"],"names":["webpackJsonp","../node_modules/@babel/runtime/helpers/asyncToGenerator.js","module","exports","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","err","apply","undefined","../node_modules/@babel/runtime/helpers/classCallCheck.js","_classCallCheck","instance","Constructor","TypeError","../node_modules/@babel/runtime/helpers/createClass.js","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_createClass","protoProps","staticProps","prototype","../node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime-module.js","__webpack_require__","g","Function","hadRuntime","regeneratorRuntime","getOwnPropertyNames","indexOf","oldRuntime","e","../node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime.js","global","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","makeInvokeMethod","tryCatch","obj","type","call","GeneratorFunction","GeneratorFunctionPrototype","defineIteratorMethods","forEach","method","AsyncIterator","invoke","record","result","hasOwn","__await","unwrapped","enqueue","callInvokeWithMethodAndArg","previousPromise","state","GenStateSuspendedStart","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","GenStateSuspendedYield","iterator","return","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","values","iterable","iteratorMethod","iteratorSymbol","isNaN","Op","hasOwnProperty","$Symbol","Symbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","inModule","runtime","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","Gp","constructor","displayName","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","async","iter","toString","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootEntry","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","../node_modules/@babel/runtime/regenerator/index.js","../node_modules/webpack/buildin/harmony-module.js","originalModule","webpackPolyfill","children","get","l","./js/app.js","__webpack_exports__","__WEBPACK_IMPORTED_MODULE_0__components_SampleComponent__","__WEBPACK_IMPORTED_MODULE_1__helpers_jsonRequest__","window","onload","event","render","document","querySelector","addEventListener","console","log","bind","LazyLoadingComponent","./js/components/SampleComponent.js","__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_classCallCheck__","__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_classCallCheck___default","n","__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_createClass__","__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_createClass___default","Component","el","content","innerHTML","./js/helpers/jsonRequest.js","d","jsonRequest","__WEBPACK_IMPORTED_MODULE_0__babel_runtime_regenerator__","__WEBPACK_IMPORTED_MODULE_0__babel_runtime_regenerator___default","__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_asyncToGenerator__","__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_asyncToGenerator___default","request","_ref","a","_callee","URI","hook","response","json","_context","fetch","_x","_x2"],"mappings":"AAAAA,cAAc,IAERC,6DACA,SAAUC,EAAQC,GCHxB,QAAAC,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IACA,GAAAC,GAAAP,EAAAK,GAAAC,GACAE,EAAAD,EAAAC,MACG,MAAAC,GAEH,WADAP,GAAAO,GAIAF,EAAAG,KACAT,EAAAO,GAEAG,QAAAV,QAAAO,GAAAI,KAAAT,EAAAC,GAIA,QAAAS,GAAAC,GACA,kBACA,GAAAC,GAAAC,KACAC,EAAAC,SACA,WAAAP,SAAA,SAAAV,EAAAC,GAGA,QAAAC,GAAAK,GACAT,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAI,GAGA,QAAAJ,GAAAe,GACApB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,QAAAe,GAPA,GAAAnB,GAAAc,EAAAM,MAAAL,EAAAE,EAUAd,OAAAkB,OAKAxB,EAAAC,QAAAe,GDSMS,2DACA,SAAUzB,EAAQC,GE9CxB,QAAAyB,GAAAC,EAAAC,GACA,KAAAD,YAAAC,IACA,SAAAC,WAAA,qCAIA7B,EAAAC,QAAAyB,GFoDMI,wDACA,SAAU9B,EAAQC,GG3DxB,QAAA8B,GAAAC,EAAAC,GACA,OAAAC,GAAA,EAAiBA,EAAAD,EAAAE,OAAkBD,IAAA,CACnC,GAAAE,GAAAH,EAAAC,EACAE,GAAAC,WAAAD,EAAAC,aAAA,EACAD,EAAAE,cAAA,EACA,SAAAF,OAAAG,UAAA,GACAC,OAAAC,eAAAT,EAAAI,EAAA5B,IAAA4B,IAIA,QAAAM,GAAAd,EAAAe,EAAAC,GAGA,MAFAD,IAAAZ,EAAAH,EAAAiB,UAAAF,GACAC,GAAAb,EAAAH,EAAAgB,GACAhB,EAGA5B,EAAAC,QAAAyC,GHiEMI,oFACA,SAAU9C,EAAQC,EAAS8C,GIzEjC,GAAAC,GAAA,WACA,MAAA7B,OAAA,gBAAAD,gBACC+B,SAAA,iBAIDC,EAAAF,EAAAG,oBACAX,OAAAY,oBAAAJ,GAAAK,QAAA,yBAGAC,EAAAJ,GAAAF,EAAAG,kBAOA,IAJAH,EAAAG,uBAAA3B,GAEAxB,EAAAC,QAAA8C,EAAA,8EAEAG,EAEAF,EAAAG,mBAAAG,MAGA,WACAN,GAAAG,mBACG,MAAAI,GACHP,EAAAG,uBAAA3B,KJ2FMgC,6EACA,SAAUxD,EAAQC,IKvHxB,SAAAwD,GACA,YA2BA,SAAAC,GAAAC,EAAAC,EAAA1C,EAAA2C,GAEA,GAAAC,GAAAF,KAAAf,oBAAAkB,GAAAH,EAAAG,EACAC,EAAAxB,OAAAyB,OAAAH,EAAAjB,WACAqB,EAAA,GAAAC,GAAAN,MAMA,OAFAG,GAAAI,QAAAC,EAAAV,EAAAzC,EAAAgD,GAEAF,EAcA,QAAAM,GAAArD,EAAAsD,EAAA9D,GACA,IACA,OAAc+D,KAAA,SAAA/D,IAAAQ,EAAAwD,KAAAF,EAAA9D,IACT,MAAAa,GACL,OAAckD,KAAA,QAAA/D,IAAAa,IAiBd,QAAAyC,MACA,QAAAW,MACA,QAAAC,MA4BA,QAAAC,GAAA/B,IACA,yBAAAgC,QAAA,SAAAC,GACAjC,EAAAiC,GAAA,SAAArE,GACA,MAAAU,MAAAiD,QAAAU,EAAArE,MAoCA,QAAAsE,GAAAf,GACA,QAAAgB,GAAAF,EAAArE,EAAAL,EAAAC,GACA,GAAA4E,GAAAX,EAAAN,EAAAc,GAAAd,EAAAvD,EACA,cAAAwE,EAAAT,KAEO,CACP,GAAAU,GAAAD,EAAAxE,IACAE,EAAAuE,EAAAvE,KACA,OAAAA,IACA,gBAAAA,IACAwE,EAAAV,KAAA9D,EAAA,WACAG,QAAAV,QAAAO,EAAAyE,SAAArE,KAAA,SAAAJ,GACAqE,EAAA,OAAArE,EAAAP,EAAAC,IACW,SAAAiB,GACX0D,EAAA,QAAA1D,EAAAlB,EAAAC,KAIAS,QAAAV,QAAAO,GAAAI,KAAA,SAAAsE,GAIAH,EAAAvE,MAAA0E,EACAjF,EAAA8E,IACS,SAAAtE,GAGT,MAAAoE,GAAA,QAAApE,EAAAR,EAAAC,KAvBAA,EAAA4E,EAAAxE,KA8BA,QAAA6E,GAAAR,EAAArE,GACA,QAAA8E,KACA,UAAAzE,SAAA,SAAAV,EAAAC,GACA2E,EAAAF,EAAArE,EAAAL,EAAAC,KAIA,MAAAmF,GAaAA,IAAAzE,KACAwE,EAGAA,GACAA,IA3BA,GAAAC,EAgCArE,MAAAiD,QAAAkB,EAwBA,QAAAjB,GAAAV,EAAAzC,EAAAgD,GACA,GAAAuB,GAAAC,CAEA,iBAAAZ,EAAArE,GACA,GAAAgF,IAAAE,EACA,SAAAC,OAAA,+BAGA,IAAAH,IAAAI,EAAA,CACA,aAAAf,EACA,KAAArE,EAKA,OAAAqF,KAMA,IAHA5B,EAAAY,SACAZ,EAAAzD,QAEA,CACA,GAAAsF,GAAA7B,EAAA6B,QACA,IAAAA,EAAA,CACA,GAAAC,GAAAC,EAAAF,EAAA7B,EACA,IAAA8B,EAAA,CACA,GAAAA,IAAAE,EAAA,QACA,OAAAF,IAIA,YAAA9B,EAAAY,OAGAZ,EAAAiC,KAAAjC,EAAAkC,MAAAlC,EAAAzD,QAES,cAAAyD,EAAAY,OAAA,CACT,GAAAW,IAAAC,EAEA,KADAD,GAAAI,EACA3B,EAAAzD,GAGAyD,GAAAmC,kBAAAnC,EAAAzD,SAES,WAAAyD,EAAAY,QACTZ,EAAAoC,OAAA,SAAApC,EAAAzD,IAGAgF,GAAAE,CAEA,IAAAV,GAAAX,EAAAX,EAAAzC,EAAAgD,EACA,eAAAe,EAAAT,KAAA,CAOA,GAJAiB,EAAAvB,EAAArD,KACAgF,EACAU,EAEAtB,EAAAxE,MAAAyF,EACA,QAGA,QACAvF,MAAAsE,EAAAxE,IACAI,KAAAqD,EAAArD,MAGS,UAAAoE,EAAAT,OACTiB,EAAAI,EAGA3B,EAAAY,OAAA,QACAZ,EAAAzD,IAAAwE,EAAAxE,OAUA,QAAAwF,GAAAF,EAAA7B,GACA,GAAAY,GAAAiB,EAAAS,SAAAtC,EAAAY,OACA,IAAAA,IAAAtD,EAAA,CAKA,GAFA0C,EAAA6B,SAAA,KAEA,UAAA7B,EAAAY,OAAA,CACA,GAAAiB,EAAAS,SAAAC,SAGAvC,EAAAY,OAAA,SACAZ,EAAAzD,IAAAe,EACAyE,EAAAF,EAAA7B,GAEA,UAAAA,EAAAY,QAGA,MAAAoB,EAIAhC,GAAAY,OAAA,QACAZ,EAAAzD,IAAA,GAAAoB,WACA,kDAGA,MAAAqE,GAGA,GAAAjB,GAAAX,EAAAQ,EAAAiB,EAAAS,SAAAtC,EAAAzD,IAEA,cAAAwE,EAAAT,KAIA,MAHAN,GAAAY,OAAA,QACAZ,EAAAzD,IAAAwE,EAAAxE,IACAyD,EAAA6B,SAAA,KACAG,CAGA,IAAAxF,GAAAuE,EAAAxE,GAEA,OAAAC,GAOAA,EAAAG,MAGAqD,EAAA6B,EAAAW,YAAAhG,EAAAC,MAGAuD,EAAAyC,KAAAZ,EAAAa,QAQA,WAAA1C,EAAAY,SACAZ,EAAAY,OAAA,OACAZ,EAAAzD,IAAAe,GAUA0C,EAAA6B,SAAA,KACAG,GANAxF,GA3BAwD,EAAAY,OAAA,QACAZ,EAAAzD,IAAA,GAAAoB,WAAA,oCACAqC,EAAA6B,SAAA,KACAG,GAoDA,QAAAW,GAAAC,GACA,GAAAC,IAAiBC,OAAAF,EAAA,GAEjB,KAAAA,KACAC,EAAAE,SAAAH,EAAA,IAGA,IAAAA,KACAC,EAAAG,WAAAJ,EAAA,GACAC,EAAAI,SAAAL,EAAA,IAGA3F,KAAAiG,WAAAC,KAAAN,GAGA,QAAAO,GAAAP,GACA,GAAA9B,GAAA8B,EAAAQ,cACAtC,GAAAT,KAAA,eACAS,GAAAxE,IACAsG,EAAAQ,WAAAtC,EAGA,QAAAd,GAAAN,GAIA1C,KAAAiG,aAAwBJ,OAAA,SACxBnD,EAAAgB,QAAAgC,EAAA1F,MACAA,KAAAqG,OAAA,GA8BA,QAAAC,GAAAC,GACA,GAAAA,EAAA,CACA,GAAAC,GAAAD,EAAAE,EACA,IAAAD,EACA,MAAAA,GAAAlD,KAAAiD,EAGA,sBAAAA,GAAAf,KACA,MAAAe,EAGA,KAAAG,MAAAH,EAAAvF,QAAA,CACA,GAAAD,IAAA,EAAAyE,EAAA,QAAAA,KACA,OAAAzE,EAAAwF,EAAAvF,QACA,GAAAgD,EAAAV,KAAAiD,EAAAxF,GAGA,MAFAyE,GAAAhG,MAAA+G,EAAAxF,GACAyE,EAAA9F,MAAA,EACA8F,CAOA,OAHAA,GAAAhG,MAAAa,EACAmF,EAAA9F,MAAA,EAEA8F,EAGA,OAAAA,WAKA,OAAYA,KAAAb,GAIZ,QAAAA,KACA,OAAYnF,MAAAa,EAAAX,MAAA,GArfZ,GAEAW,GAFAsG,EAAAtF,OAAAK,UACAsC,EAAA2C,EAAAC,eAEAC,EAAA,kBAAAC,kBACAL,EAAAI,EAAAxB,UAAA,aACA0B,EAAAF,EAAAG,eAAA,kBACAC,EAAAJ,EAAAK,aAAA,gBAEAC,EAAA,gBAAAtI,GACAuI,EAAA9E,EAAAN,kBACA,IAAAoF,EAQA,YAPAD,IAGAtI,EAAAC,QAAAsI,GASAA,GAAA9E,EAAAN,mBAAAmF,EAAAtI,EAAAC,WAcAsI,EAAA7E,MAoBA,IAAAgC,GAAA,iBACAa,EAAA,iBACAZ,EAAA,YACAE,EAAA,YAIAK,KAYAsC,IACAA,GAAAZ,GAAA,WACA,MAAAzG,MAGA,IAAAsH,GAAAjG,OAAAkG,eACAC,EAAAF,OAAAhB,OACAkB,IACAA,IAAAb,GACA3C,EAAAV,KAAAkE,EAAAf,KAGAY,EAAAG,EAGA,IAAAC,GAAAjE,EAAA9B,UACAkB,EAAAlB,UAAAL,OAAAyB,OAAAuE,EACA9D,GAAA7B,UAAA+F,EAAAC,YAAAlE,EACAA,EAAAkE,YAAAnE,EACAC,EAAAyD,GACA1D,EAAAoE,YAAA,oBAYAP,EAAAQ,oBAAA,SAAAC,GACA,GAAAC,GAAA,kBAAAD,MAAAH,WACA,SAAAI,IACAA,IAAAvE,GAGA,uBAAAuE,EAAAH,aAAAG,EAAAC,QAIAX,EAAAY,KAAA,SAAAH,GAUA,MATAxG,QAAA4G,eACA5G,OAAA4G,eAAAJ,EAAArE,IAEAqE,EAAAK,UAAA1E,EACAyD,IAAAY,KACAA,EAAAZ,GAAA,sBAGAY,EAAAnG,UAAAL,OAAAyB,OAAA2E,GACAI,GAOAT,EAAAe,MAAA,SAAA7I,GACA,OAAY2E,QAAA3E,IAsEZmE,EAAAG,EAAAlC,WACAkC,EAAAlC,UAAAqF,GAAA,WACA,MAAA/G,OAEAoH,EAAAxD,gBAKAwD,EAAAgB,MAAA,SAAA5F,EAAAC,EAAA1C,EAAA2C,GACA,GAAA2F,GAAA,GAAAzE,GACArB,EAAAC,EAAAC,EAAA1C,EAAA2C,GAGA,OAAA0E,GAAAQ,oBAAAnF,GACA4F,EACAA,EAAA7C,OAAA5F,KAAA,SAAAmE,GACA,MAAAA,GAAArE,KAAAqE,EAAAvE,MAAA6I,EAAA7C,UAsKA/B,EAAAgE,GAEAA,EAAAR,GAAA,YAOAQ,EAAAhB,GAAA,WACA,MAAAzG,OAGAyH,EAAAa,SAAA,WACA,4BAkCAlB,EAAAmB,KAAA,SAAAC,GACA,GAAAD,KACA,QAAAlJ,KAAAmJ,GACAD,EAAArC,KAAA7G,EAMA,OAJAkJ,GAAAE,UAIA,QAAAjD,KACA,KAAA+C,EAAAvH,QAAA,CACA,GAAA3B,GAAAkJ,EAAAG,KACA,IAAArJ,IAAAmJ,GAGA,MAFAhD,GAAAhG,MAAAH,EACAmG,EAAA9F,MAAA,EACA8F,EAQA,MADAA,GAAA9F,MAAA,EACA8F,IAsCA4B,EAAAd,SAMAtD,EAAAtB,WACAgG,YAAA1E,EAEAqD,MAAA,SAAAsC,GAcA,GAbA3I,KAAA4I,KAAA,EACA5I,KAAAwF,KAAA,EAGAxF,KAAAgF,KAAAhF,KAAAiF,MAAA5E,EACAL,KAAAN,MAAA,EACAM,KAAA4E,SAAA,KAEA5E,KAAA2D,OAAA,OACA3D,KAAAV,IAAAe,EAEAL,KAAAiG,WAAAvC,QAAAyC,IAEAwC,EACA,OAAAZ,KAAA/H,MAEA,MAAA+H,EAAAc,OAAA,IACA7E,EAAAV,KAAAtD,KAAA+H,KACArB,OAAAqB,EAAAe,MAAA,MACA9I,KAAA+H,GAAA1H,IAMA0I,KAAA,WACA/I,KAAAN,MAAA,CAEA,IAAAsJ,GAAAhJ,KAAAiG,WAAA,GACAgD,EAAAD,EAAA5C,UACA,cAAA6C,EAAA5F,KACA,KAAA4F,GAAA3J,GAGA,OAAAU,MAAAkJ,MAGAhE,kBAAA,SAAAiE,GAMA,QAAAC,GAAAC,EAAAC,GAYA,MAXAxF,GAAAT,KAAA,QACAS,EAAAxE,IAAA6J,EACApG,EAAAyC,KAAA6D,EAEAC,IAGAvG,EAAAY,OAAA,OACAZ,EAAAzD,IAAAe,KAGAiJ,EAjBA,GAAAtJ,KAAAN,KACA,KAAAyJ,EAmBA,QAhBApG,GAAA/C,KAgBAe,EAAAf,KAAAiG,WAAAjF,OAAA,EAA8CD,GAAA,IAAQA,EAAA,CACtD,GAAA6E,GAAA5F,KAAAiG,WAAAlF,GACA+C,EAAA8B,EAAAQ,UAEA,aAAAR,EAAAC,OAIA,MAAAuD,GAAA,MAGA,IAAAxD,EAAAC,QAAA7F,KAAA4I,KAAA,CACA,GAAAW,GAAAvF,EAAAV,KAAAsC,EAAA,YACA4D,EAAAxF,EAAAV,KAAAsC,EAAA,aAEA,IAAA2D,GAAAC,EAAA,CACA,GAAAxJ,KAAA4I,KAAAhD,EAAAE,SACA,MAAAsD,GAAAxD,EAAAE,UAAA,EACa,IAAA9F,KAAA4I,KAAAhD,EAAAG,WACb,MAAAqD,GAAAxD,EAAAG,gBAGW,IAAAwD,GACX,GAAAvJ,KAAA4I,KAAAhD,EAAAE,SACA,MAAAsD,GAAAxD,EAAAE,UAAA,OAGW,KAAA0D,EAMX,SAAA/E,OAAA,yCALA,IAAAzE,KAAA4I,KAAAhD,EAAAG,WACA,MAAAqD,GAAAxD,EAAAG,gBAUAZ,OAAA,SAAA9B,EAAA/D,GACA,OAAAyB,GAAAf,KAAAiG,WAAAjF,OAAA,EAA8CD,GAAA,IAAQA,EAAA,CACtD,GAAA6E,GAAA5F,KAAAiG,WAAAlF,EACA,IAAA6E,EAAAC,QAAA7F,KAAA4I,MACA5E,EAAAV,KAAAsC,EAAA,eACA5F,KAAA4I,KAAAhD,EAAAG,WAAA,CACA,GAAA0D,GAAA7D,CACA,QAIA6D,IACA,UAAApG,GACA,aAAAA,IACAoG,EAAA5D,QAAAvG,GACAA,GAAAmK,EAAA1D,aAGA0D,EAAA,KAGA,IAAA3F,GAAA2F,IAAArD,aAIA,OAHAtC,GAAAT,OACAS,EAAAxE,MAEAmK,GACAzJ,KAAA2D,OAAA,OACA3D,KAAAwF,KAAAiE,EAAA1D,WACAhB,GAGA/E,KAAA0J,SAAA5F,IAGA4F,SAAA,SAAA5F,EAAAkC,GACA,aAAAlC,EAAAT,KACA,KAAAS,GAAAxE,GAcA,OAXA,UAAAwE,EAAAT,MACA,aAAAS,EAAAT,KACArD,KAAAwF,KAAA1B,EAAAxE,IACO,WAAAwE,EAAAT,MACPrD,KAAAkJ,KAAAlJ,KAAAV,IAAAwE,EAAAxE,IACAU,KAAA2D,OAAA,SACA3D,KAAAwF,KAAA,OACO,WAAA1B,EAAAT,MAAA2C,IACPhG,KAAAwF,KAAAQ,GAGAjB,GAGA4E,OAAA,SAAA5D,GACA,OAAAhF,GAAAf,KAAAiG,WAAAjF,OAAA,EAA8CD,GAAA,IAAQA,EAAA,CACtD,GAAA6E,GAAA5F,KAAAiG,WAAAlF,EACA,IAAA6E,EAAAG,eAGA,MAFA/F,MAAA0J,SAAA9D,EAAAQ,WAAAR,EAAAI,UACAG,EAAAP,GACAb,IAKA6E,MAAA,SAAA/D,GACA,OAAA9E,GAAAf,KAAAiG,WAAAjF,OAAA,EAA8CD,GAAA,IAAQA,EAAA,CACtD,GAAA6E,GAAA5F,KAAAiG,WAAAlF,EACA,IAAA6E,EAAAC,WAAA,CACA,GAAA/B,GAAA8B,EAAAQ,UACA,cAAAtC,EAAAT,KAAA,CACA,GAAAwG,GAAA/F,EAAAxE,GACA6G,GAAAP,GAEA,MAAAiE,IAMA,SAAApF,OAAA,0BAGAqF,cAAA,SAAAvD,EAAAhB,EAAAE,GAaA,MAZAzF,MAAA4E,UACAS,SAAAiB,EAAAC,GACAhB,aACAE,WAGA,SAAAzF,KAAA2D,SAGA3D,KAAAV,IAAAe,GAGA0E,KAOA,WACA,MAAA/E,OAAA,gBAAAD,gBACG+B,SAAA,mBLsIGiI,sDACA,SAAUlL,EAAQC,EAAS8C,GMt1BjC/C,EAAAC,QAAA8C,EAAA,sFN61BMoI,oDACA,SAAUnL,EAAQC,GO91BxBD,EAAAC,QAAA,SAAAmL,GACA,IAAAA,EAAAC,gBAAA,CACA,GAAArL,GAAAwC,OAAAyB,OAAAmH,EAEApL,GAAAsL,WAAAtL,EAAAsL,aACA9I,OAAAC,eAAAzC,EAAA,UACAqC,YAAA,EACAkJ,IAAA,WACA,MAAAvL,GAAAwL,KAGAhJ,OAAAC,eAAAzC,EAAA,MACAqC,YAAA,EACAkJ,IAAA,WACA,MAAAvL,GAAAkC,KAGAM,OAAAC,eAAAzC,EAAA,WACAqC,YAAA,IAEArC,EAAAqL,gBAAA,EAEA,MAAArL,KPs2BMyL,cACA,SAAUzL,EAAQ0L,EAAqB3I,GAE7C,YACAP,QAAOC,eAAeiJ,EAAqB,cAAgB/K,OAAO,GAC7C,IAAIgL,GAA4D5I,EAAoB,sCAChF6I,EAAqD7I,EAAoB,8BQ/3BlG8I,QAAOC,OAAS,SAACC,GAEG,GAAIJ,GAAA,QAAgB,QAAS,mDACnCK,SAEEC,SAASC,cAAc,aAC7BC,iBAAiB,QAAS,SAACJ,GAEjCK,QAAQC,IAAI,gCAEZtJ,EAAAQ,EAAA,GAAAxC,KAAAgC,EAAAuJ,KAAA,iDAAmDvL,KAAK,SAACwL,GACvDH,QAAQC,IAAIE,GACQ,GAAIA,GAAqB,SAC/BP,WACbjB,MAAM,SAACnK,GACRwL,QAAQC,IAAIzL,OAIhB4B,OAAAoJ,EAAA,GAAY,qDAAsDQ,QAAQC,ORm4BtEG,qCACA,SAAUxM,EAAQ0L,EAAqB3I,GAE7C,cAC4B,SAAS/C,GAA8B,GAAIyM,GAAsE1J,EAAoB,4DACxI2J,EAA8E3J,EAAoB4J,EAAEF,GACpGG,EAAmE7J,EAAoB,yDACvF8J,EAA2E9J,EAAoB4J,EAAEC,ES75B1HR,SAAQC,IAAI,sBTs6BZ,ISp6BMS,GTs6BN,WSr6BE,QAAAA,GAAYC,EAAIC,GAASN,IAAAvL,KAAA2L,GACvB3L,KAAKc,SACLd,KAAKc,MAAM+K,QAAUA,EACrB7L,KAAK4L,GAAKA,ETm7BZ,MARAF,KAA2EC,IACzEtM,IAAK,SACLG,MAAO,WS16BEsL,SAASC,cAAc/K,KAAK4L,IAClCE,UAAY9L,KAAKc,MAAM+K,YT+6BrBF,IS36BT9M,GAAOC,QAAU6M,IT+6BYrI,KAAKiH,EAAqB3I,EAAoB,qDAAqD/C,KAI1HkN,8BACA,SAAUlN,EAAQ0L,EAAqB3I,GAE7C,YAC+BA,GAAoBoK,EAAEzB,EAAqB,IAAK,WAAa,MAAO0B,IAC9E,IAAIC,GAA2DtK,EAAoB,uDAC/EuK,EAAmEvK,EAAoB4J,EAAEU,GACzFE,EAAwExK,EAAoB,8DAC5FyK,EAAgFzK,EAAoB4J,EAAEY,GUv8BzHE,EAAO,cAAAC,GAAAF,IAAAF,EAAAK,EAAAxE,KAAG,QAAAyE,GAAOC,EAAKC,GAAZ,GAAAC,GAAAC,CAAA,OAAAV,GAAAK,EAAAjK,KAAA,SAAAuK,GAAA,cAAAA,EAAAlE,KAAAkE,EAAAtH,MAAA,aAAAsH,GAAAtH,KAAA,EACWuH,MAAML,EADjB,cACNE,GADME,EAAA9H,KAAA8H,EAAAtH,KAAA,EAEOoH,EAASC,MAFhB,QAENA,EAFMC,EAAA9H,KAIQ,kBAAT2H,IAAqBA,EAAKE,EAJzB,wBAAAC,GAAA/D,SAAA0D,EAAAzM,QAAH,iBAAAgN,EAAAC,GAAA,MAAAV,GAAAnM,MAAAJ,KAAAE,eAWE+L,EAAcK,KVm/B1B","file":"app.bundle.js","sourcesContent":["webpackJsonp([1],{\n\n/***/ \"../node_modules/@babel/runtime/helpers/asyncToGenerator.js\":\n/***/ (function(module, exports) {\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;\n\n/***/ }),\n\n/***/ \"../node_modules/@babel/runtime/helpers/classCallCheck.js\":\n/***/ (function(module, exports) {\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;\n\n/***/ }),\n\n/***/ \"../node_modules/@babel/runtime/helpers/createClass.js\":\n/***/ (function(module, exports) {\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;\n\n/***/ }),\n\n/***/ \"../node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime-module.js\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() {\n  return this || (typeof self === \"object\" && self);\n})() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = __webpack_require__(\"../node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime.js\");\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n\n\n/***/ }),\n\n/***/ \"../node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime.js\":\n/***/ (function(module, exports) {\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() {\n    return this || (typeof self === \"object\" && self);\n  })() || Function(\"return this\")()\n);\n\n\n/***/ }),\n\n/***/ \"../node_modules/@babel/runtime/regenerator/index.js\":\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(\"../node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime-module.js\");\n\n\n/***/ }),\n\n/***/ \"../node_modules/webpack/buildin/harmony-module.js\":\n/***/ (function(module, exports) {\n\nmodule.exports = function(originalModule) {\r\n\tif(!originalModule.webpackPolyfill) {\r\n\t\tvar module = Object.create(originalModule);\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"exports\", {\r\n\t\t\tenumerable: true,\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n\n\n/***/ }),\n\n/***/ \"./js/app.js\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_SampleComponent__ = __webpack_require__(\"./js/components/SampleComponent.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__helpers_jsonRequest__ = __webpack_require__(\"./js/helpers/jsonRequest.js\");\n\n\n\nwindow.onload = function (event) {\n  var myComponent = new __WEBPACK_IMPORTED_MODULE_0__components_SampleComponent__[\"default\"]('#root', 'Hey there! This is the Webpack 3.x Boilerplate!');\n  myComponent.render();\n  var lazyBtn = document.querySelector('#lazy-btn');\n  lazyBtn.addEventListener('click', function (event) {\n    console.log('Loading LazyLoadingComponent');\n    __webpack_require__.e/* import() */(0).then(__webpack_require__.bind(null, \"./js/components/LazyLoadingComponent.js\")).then(function (LazyLoadingComponent) {\n      console.log(LazyLoadingComponent);\n      var lazyComponent = new LazyLoadingComponent('.lazy');\n      lazyComponent.render();\n    }).catch(function (error) {\n      console.log(error);\n    });\n  });\n  Object(__WEBPACK_IMPORTED_MODULE_1__helpers_jsonRequest__[\"a\" /* jsonRequest */])('https://api.github.com/users/code-for-coffee/repos', console.log);\n};\n\n/***/ }),\n\n/***/ \"./js/components/SampleComponent.js\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_classCallCheck__ = __webpack_require__(\"../node_modules/@babel/runtime/helpers/classCallCheck.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_classCallCheck___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_classCallCheck__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_createClass__ = __webpack_require__(\"../node_modules/@babel/runtime/helpers/createClass.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_createClass___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_createClass__);\n\n\n\n/**\n * Created by code-for-coffee on 1/10/17.\n */\nconsole.log('Loaded Component.js');\n\nvar Component =\n/*#__PURE__*/\nfunction () {\n  function Component(el, content) {\n    __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_classCallCheck___default()(this, Component);\n\n    this.props = {};\n    this.props.content = content;\n    this.el = el;\n  }\n\n  __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_createClass___default()(Component, [{\n    key: \"render\",\n    value: function render() {\n      var el = document.querySelector(this.el);\n      el.innerHTML = this.props.content;\n    }\n  }]);\n\n  return Component;\n}();\n\nmodule.exports = Component;\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(\"../node_modules/webpack/buildin/harmony-module.js\")(module)))\n\n/***/ }),\n\n/***/ \"./js/helpers/jsonRequest.js\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return jsonRequest; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_regenerator__ = __webpack_require__(\"../node_modules/@babel/runtime/regenerator/index.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_regenerator___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_regenerator__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_asyncToGenerator__ = __webpack_require__(\"../node_modules/@babel/runtime/helpers/asyncToGenerator.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_asyncToGenerator___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_asyncToGenerator__);\n\n\n\n/**\n * request\n * @param URI URL for an API, such as http://api.gogoair.com\n * @param hook a function that is called when response JSON is provided\n */\nvar request =\n/*#__PURE__*/\nfunction () {\n  var _ref = __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_asyncToGenerator___default()(\n  /*#__PURE__*/\n  __WEBPACK_IMPORTED_MODULE_0__babel_runtime_regenerator___default.a.mark(function _callee(URI, hook) {\n    var response, json;\n    return __WEBPACK_IMPORTED_MODULE_0__babel_runtime_regenerator___default.a.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(URI);\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return response.json();\n\n          case 5:\n            json = _context.sent;\n            //console.log(json);\n            if (typeof hook === \"function\") hook(json);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function request(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\n * jsonRequest\n * Async fetch method that fetches a URI and passes JSON to a hook function\n */\n\n\nvar jsonRequest = request;\n\n/***/ })\n\n},[\"./js/app.js\"]);\n\n\n// WEBPACK FOOTER //\n// app.bundle.js","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/@babel/runtime/helpers/asyncToGenerator.js\n// module id = ../node_modules/@babel/runtime/helpers/asyncToGenerator.js\n// module chunks = 1","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/@babel/runtime/helpers/classCallCheck.js\n// module id = ../node_modules/@babel/runtime/helpers/classCallCheck.js\n// module chunks = 1","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/@babel/runtime/helpers/createClass.js\n// module id = ../node_modules/@babel/runtime/helpers/createClass.js\n// module chunks = 1","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() {\n  return this || (typeof self === \"object\" && self);\n})() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = require(\"./runtime\");\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime-module.js\n// module id = ../node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime-module.js\n// module chunks = 1","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() {\n    return this || (typeof self === \"object\" && self);\n  })() || Function(\"return this\")()\n);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime.js\n// module id = ../node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime.js\n// module chunks = 1","module.exports = require(\"regenerator-runtime\");\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/@babel/runtime/regenerator/index.js\n// module id = ../node_modules/@babel/runtime/regenerator/index.js\n// module chunks = 1","module.exports = function(originalModule) {\r\n\tif(!originalModule.webpackPolyfill) {\r\n\t\tvar module = Object.create(originalModule);\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"exports\", {\r\n\t\t\tenumerable: true,\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/webpack/buildin/harmony-module.js\n// module id = ../node_modules/webpack/buildin/harmony-module.js\n// module chunks = 1","import SampleComponent from './components/SampleComponent';\nimport {jsonRequest} from './helpers/jsonRequest';\n\nwindow.onload = (event) => {\n\n  let myComponent = new SampleComponent('#root', 'Hey there! This is the Webpack 3.x Boilerplate!');\n  myComponent.render();\n\n  let lazyBtn = document.querySelector('#lazy-btn');\n  lazyBtn.addEventListener('click', (event) => {\n\n    console.log('Loading LazyLoadingComponent');\n\n    System.import('./components/LazyLoadingComponent').then((LazyLoadingComponent) => {\n      console.log(LazyLoadingComponent);\n      let lazyComponent = new LazyLoadingComponent('.lazy');\n      lazyComponent.render();\n    }).catch((error) => {\n      console.log(error);\n    });\n  });\n\n  jsonRequest('https://api.github.com/users/code-for-coffee/repos', console.log);\n};\n\n\n\n\n// WEBPACK FOOTER //\n// ./js/app.js","/**\n * Created by code-for-coffee on 1/10/17.\n */\nconsole.log('Loaded Component.js');\n\nclass Component {\n  constructor(el, content) {\n    this.props = {};\n    this.props.content = content;\n    this.el = el;\n  }\n  render() {\n    let el = document.querySelector(this.el);\n    el.innerHTML = this.props.content;\n  }\n}\n\nmodule.exports = Component;\n\n\n// WEBPACK FOOTER //\n// ./js/components/SampleComponent.js","/**\n * request\n * @param URI URL for an API, such as http://api.gogoair.com\n * @param hook a function that is called when response JSON is provided\n */\nconst request = async (URI, hook) => {\n    const response = await fetch(URI);\n    const json = await response.json();\n    //console.log(json);\n    if (typeof hook === \"function\") hook(json);\n  };\n  \n  /**\n   * jsonRequest\n   * Async fetch method that fetches a URI and passes JSON to a hook function\n   */\n  export const jsonRequest = request;\n\n\n// WEBPACK FOOTER //\n// ./js/helpers/jsonRequest.js"],"sourceRoot":""}